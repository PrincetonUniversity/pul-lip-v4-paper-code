% Events regarding P1 were coded incorrectly in NeuroExplorer/Presentation
% and need to be adjusted (no 0D data here).
% logInfo contains trial type information for all correct non-catch trials.
% Event010 should also have only correct non-catch trials.

function decodeAdjustCueP1(Event010, logInfo)

% load the required variables, which may be in different directory from the
% current path
load StimuliOnset_5D ArrB*P ArrP CueB*P CueP % those variables were generated by running decodeNeuroExplorerEvents

% remove the values related to CueP1. CueP and ArrP are apparently still OK
ArrBowP(:,1) = NaN;
ArrBarP(:,1) = NaN;
ArrBowInconP(:,1) = NaN;
ArrBowConP(:,1) = NaN;
ArrBarInconP(:,1) = NaN;
ArrBarConP(:,1) = NaN;
CueBowP(:,1) = NaN;
CueBarP(:,1) = NaN;
CueBarInconP(:,1) = NaN;
CueBarConP(:,1) = NaN;
CueBowInconP(:,1) = NaN;
CueBowConP(:,1) = NaN;

CueBowCount = 0; CueBowInconCount = 0; CueBowConCount = 0;
CueBarCount = 0; CueBarInconCount = 0; CueBarConCount = 0;

someVar = 2.15; % sec TODO figure this out
maxCueToArrayTime = 1; % sec

% make sure CueP and ArrP are set up correctly
numP1Trials = sum(~isnan(CueP(:,1)));
assert(numP1Trials == sum(~isnan(ArrP(:,1))));
assert(all(~isnan(CueP(1:numP1Trials,1))));
assert(all(~isnan(ArrP(1:numP1Trials,1))));

% array onset
% note that ArrP(i,1) is i-th array onset time at P1. 
for i = 1:numP1Trials
    % this doesn't seem right... maybe should be CueP TODO look into this
    % Event10 is juice pulse
    indx = find(Event010 > ArrP(i,1) & Event010 < ArrP(i,1) + someVar);
    if ~isempty(indx)
        if length(indx) > 1
            warning(['Too many (%d) juice pulses within %f of a single'...
                    ' array onset at %f. Using first juice pulse '...
                    'only.\n'], length(indx), someVar, ArrP(i,1));
            indx = indx(1); % if there are more than one trial, just use the first one.
        end
        if strfind(logInfo(indx,:), 'cued barrel')
            CueBarCount = CueBarCount + 1;
            ArrBarP(CueBarCount,1) = ArrP(i,1);
            if strfind(logInfo(indx,:), 'incongruent cued barrel')
                CueBarInconCount = CueBarInconCount + 1;
                ArrBarInconP(CueBarInconCount,1) = ArrP(i,1);
            elseif strfind(logInfo(indx,:), 'congruent cued barrel')
                CueBarConCount = CueBarConCount + 1;
                ArrBarConP(CueBarConCount,1) = ArrP(i,1);
            end
        elseif strfind(logInfo(indx,:), 'cued bowtie')
            CueBowCount = CueBowCount + 1;
            ArrBowP(CueBowCount,1) = ArrP(i,1);
            if strfind(logInfo(indx,:), 'incongruent cued bowtie')
                CueBowInconCount = CueBowInconCount + 1;
                ArrBowInconP(CueBowInconCount,1) = ArrP(i,1);
            elseif strfind(logInfo(indx,:), 'congruent cued bowtie')
                CueBowConCount = CueBowConCount + 1;
                ArrBowConP(CueBowConCount,1) = ArrP(i,1);
            end
        end
    end
end

% cue onset
CueBowInconCount = 0; CueBowConCount = 0;
CueBarInconCount = 0; CueBarConCount = 0;

for i = 1:numP1Trials
    [CueBowInconP, CueBowInconCount] = resetCueOnsetTimes(ArrBowInconP, ...
        CueBowInconP, CueBowInconCount, CueP(i,1), maxCueToArrayTime);
    [CueBowConP, CueBowConCount] = resetCueOnsetTimes(ArrBowConP, ...
        CueBowConP, CueBowConCount, CueP(i,1), maxCueToArrayTime);
    [CueBarInconP, CueBarInconCount] = resetCueOnsetTimes(ArrBarInconP, ...
        CueBarInconP, CueBarInconCount, CueP(i,1), maxCueToArrayTime);
    [CueBarConP, CueBarConCount] = resetCueOnsetTimes(ArrBarConP, ...
        CueBarConP, CueBarConCount, CueP(i,1), maxCueToArrayTime);
end

CueBowP1 = sort([CueBowInconP(:,1); CueBowConP(:,1)]);
CueBarP1 = sort([CueBarInconP(:,1); CueBarConP(:,1)]);
CueBowP1(isnan(CueBowP1)) = [];
CueBarP1(isnan(CueBarP1)) = [];
CueBowP(1:numel(CueBowP1),1) = CueBowP1; 
CueBarP(1:numel(CueBarP1),1) = CueBarP1; 

% in case some arrays got elements added due to re-classification, there
% would be 0s in the other non-first columns. make zeros NaN. there's never
% an event at t=0 anyway. not the cleanest code, but it works and is clear.
ArrBowP(ArrBowP == 0) = NaN;
ArrBarP(ArrBarP == 0) = NaN;
ArrBowInconP(ArrBowInconP == 0) = NaN;
ArrBowConP(ArrBowConP == 0) = NaN;
ArrBarInconP(ArrBarInconP == 0) = NaN;
ArrBarConP(ArrBarConP == 0) = NaN;
CueBowP(CueBowP == 0) = NaN;
CueBarP(CueBarP == 0) = NaN;
CueBarInconP(CueBarInconP == 0) = NaN;
CueBarConP(CueBarConP == 0) = NaN;
CueBowInconP(CueBowInconP == 0) = NaN;
CueBowConP(CueBowConP == 0) = NaN;

clear CueBowP1 CueBarP1

% update all of the variables related to CueP1
save('StimuliOnset_5D', 'ArrB*P', 'CueB*P', '-append')

end


% adds cue time CuePi to the array cueTimes for P1 at the next open spot 
% cueTimesCount, only if there are P1 trials and the time between cue and array
% for the same trial is less than maxCueToArrayTime
function [cueTimes, cueTimesCount] = resetCueOnsetTimes(arrTimes, cueTimes, ...
        cueTimesCount, CuePi, maxCueToArrayTime)
% make sure there are trials of this type
% e.g. arrTimes could be the barrel congruent trial array onset times
if any(~isnan(arrTimes(:,1)))
    % check if there exists a P1 arrTimes that is within maxCueToArrayTime
    % seconds of CuePi (a single cue onset time for P1).
    indx = find(arrTimes(:,1) > CuePi & ...
            arrTimes(:,1) < CuePi + maxCueToArrayTime, 1);
    if ~isempty(indx)
        % save the CuePi time in cueTimes at the next spot
        cueTimesCount = cueTimesCount + 1;
        cueTimes(cueTimesCount,1) = CuePi;
    end
end

end
